Practice file Linux:
                        Локально:
man command                                  -   справка по команде
mkdir путь              		     -   создать директорию
touch путь               		     -   создать файл
cd путь      		 		     -   перейти в директорию
pwd          		 	             -   отображить текущую директорию
ls путь    	         		     -   отобразить файлы в директории
rm путь    		 		     -   удалить файл
rm -rf путь  		                     -   удалить директорию
cp путь_до_файла1 путь_до_файла_2            -   скопировать файл1 в файл2
cp путь_до_дир_1 путь_до_дир_2               -   скопировать дир1 в дир2
mv путь1 путь2                               -   переместить директорию или файл
htop                     		     -   нагрузка
sudo apt-get install mc  		     -   графический 
sudo mc                  		     -   открыть графический 
ls --all                 		     -   посмотреть все файлы и даже скрытые
ls | grep filename       		     -   проверить есть ли файл
find -name "file1.jpg"                       -   найти файл ниже по дереву папок
find -name "*.jpg"                           -   найти все файлы с расширением .jpg ниже по дереву папок
find -name "IMG_27??.jpg"                    -   найти файлы к примеру: "IMG_2701.jpg", "IMG_2732.jpg" и т.д
cd
find ./home/pj -name "IMG_2701.jpg"          -   найти начиная с папки pj и во вложенных папках pj
find <папка> -name <имя файла>               -   найти указанный файл в папке
find ~/ -name "file.txt"/"*.txt"             -   найти file.txt в домашней директории/все файлы в домашней директории
grep "<строка>" <файл>/<папка>               -   найти строку в файле/в папке
grep -c "<строка>" файл                      -   посчитать количество вхождений строки
grep -r -c "<строка>" <папка>                -   найти строку во всех файлах в папке        
gedit                                        -   открыть блокнот
cat file                                     -   вывести содержимое файла
less file                                    -   открыть файл на чтение
nano file                                    -   редактировать файл
programm < file                              -   закинуть данные в программу из файла
programm > file                              -   вывести результаты в файл (поток Standard Output(screen))
programm >> file                             -   аналогично, но с дозаписью в файл
programm 2 > file                            -   вывести результаты ошибок в файл(поток Standard Error(screen))
programm 2 >> file                           -   аналогично но с дозаписью в файл
wget ссылка                                  -   скачать файл по ссылке и  сохранить в текущей директории
wget -P путь_до_директории ссылка            -   скачать файл по ссылке и сохранить в директории заданным путем
wget -O путь_до_файла ссылка                 -   скачать файл по ссылке и сохранить под указанным именем
wget -c ссылка                               -   докачать файл по ссылке в случае обрыва связи
wget --spider ссылка                         -   проверить доступность файла по ссылке
wget --spider -i текстовый файл              -   проверить доступность файлов по ссылкам
wget -r-l глубина ссылка                     -   рекурсивное скачивание файлов по ссылке на указанную глубину
wget -r-A тип,тип,...,тип ссылка             -   рекурсивное скачивание файлов только определенного типа(типов)      Пример: wget -r -l 1 -A jpg http://www.critterbabies.com/animals/hippos/
unzip архив.zip                              -   распаковывать содержимое архива.zip
gunzip архив.gz                              -   распаковать содержимое архива.txt.gz
tar -xvf архив.tar                           -   распаковать архив.tar
tar -xzvf архив.tar.gz                       -   распаковать архив.tar.gz (с использованием gunzip)
zip архив.zip файл1 файл2/zip архив.zip f/*  -   запаковать перечсиленные файлы/запаковать все что в папке
gzip file1                                   -   запаковать файл в файл.gz,а исходный файл удалить
tar -cvf архив.tar файл1 файл2               -   запаковать перечисленные файлы и/или папки в архив.tar(без сжатия)
gzip архив.tar                               -   запаковать архив.tar в архив.tar.gz исходный архив.tar удалить
tar -zcvf архив.tar.gz файл1 файл2           -   запаковать перечисленные файлы и/или папки в архив.tar.gz(с сжатием при помощи gzip)
bzip архиватор:
bzip2 файл/bunzip2 файл.bz2/
tar -cjvf архив.tar.bz2 файл1 файл2          -   [c] для создания архива, [v]для вывода на экран, [j] это именно bzip, [f] файловая система
tar -xjvf архив.tar.bz2
------------------------------------------------------------------------------------
Права доступа:
users                                        -   узнать кто системе
less /etc/passwd                             -   узнать какие вообще есть пользователи
groups<имя_пользователя>                     -   узнать группы пользователя
drwxrwxr-x 2 user group ... dir              -   первая если d значит dir
-rw-rw-r-- 1 user group ... file             -   первая если - значит file
 первые три символа после первого символа    -   owner
 вторые три символа после первого символа    -   group
 третии три символа после первого символа    -   other
 r                                           -   read
 w                                           -   write
 x                                           -   execute
Изменить права доступа:
chmod [ugoa][+-][rwx] <путь>                 -   Пример: chmod ug+rw file.txt
chmod [octal code] <путь>                    -   Пример: chmod 777 file.txt
Изменить обладателя:
chown new_user:new_group <путь>              -   Пример: chown zoidberg: file.txt
                                                         chown :futurama file.txt
root (группа root)                           -   суперпользователь
Сделать от имени root:
  sudo <действия>
  sudo mkdir dir
  sudo chmod -r dir
Команды для создания пользователя:
sudo useradd username                        -   добавить нового пользователя username
sudo mkdir /home/username                    -   установить корневую папку для username
sudo passwd password                         -   установить пароль для username
sudo chown username /home/username

Посчитать что в файле:
  wc [что-считаем] <путь>
  wc -l file.txt                             -   количество строк
  wc -w file.txt                             -   количество слов
  wc -с file.txt                             -   количество байт
  wc -m file.txt                             -   количество символов
  wc -L file.txt                             -   длина наибольшей строки
Сравнить файлы/директории:
  diff [-q -r] <путь1> <путь2>
  diff file1.txt file2.txt | less
  diff -qr dir1/ dir2/
Сколько места занимается на диске:
  du [--max-depth <глубина> -h] <путь>
  du -h ~/
  du --max-depth 1 -h
Сколько места занято/свободно во всей системе:
  df [-h]

Вывести часть файла:
  head [-n <количество строк>] <путь>        -   Пример: head -n 10 file.txt
  tail [-n <количество строк>] <путь>        -   Пример: tail -n 50 file.txt

Работа с файлами/директориями:
 mkdir ./{dir1, dir2, dir3}
touch ~/{file1, file2}.txt

------------------------------------------------------------------------------------

Вывод с сортировкой:
ls --sort=[вид сортировки] -l <путь>
ls --sort=size -l ~/
ls --sort=time -l .
------------------------------------------------------------------------------------
Перенаправление в один файл:
&> или &>>
program &>> both.txt

Перенаправление одного потока в другой:
2>&1 strerr в stdout
1<&2 stdout в stderr

Перенаправление в никуда и из ниоткуда
/dev/null
program 2>/dev/null
cat /dev/null > file.txt
-------------------------------------------------------------------------------------
                          Сервер:
ssh логин@фадрес_сервера -p порт             -   команда входа
exit                                         -   выход с сервера
~/.ssh/id_rsa                                -   публичный ключ(на локальной машине)
~/.ssh/id_rsa.pub                            -   закрытый ключ(на локальной маишне)
~/.ssh/authorized_keys                       -   файл в которой прописан ключ (на сервере)
ssh-keygen                                   -   создание ключа
ssh-add                                      -   сообщить системе о ключе
cat ~/.id_rsa.pub                            -   просмотр публичного ключа
nano ~/.ssh/authorised_keys                  -   редактирование авторизованных ключей (на сервере)
scp -P порт логин@адрес_сервера:путь1 путь2  -   копировать файл с сервера (путь1) на клиента (путь2)
scp -P порт путь1 логин@адрес_сервера:путь2  -   копировать файл с клиента (путь1) на сервер (путь2)
sudo apt-get install программа               -   установка программ через терминал
sudo apt-get remove программа                -   удаление программ через терминал
sudo apt-get update                          -   обновление ссылок на пакеты
sudo apt-get upgrate                         -   обновление установленных пакетов
sudo apt-get install --only-upgate программа -   обновление отдельной программы
ctrl+c                                       -   прервать выполнение
ctrl+z                                       -   приостановить выполнение
jobs                                         -   посмотреть запущенные программы
fg %<номер>                                  -   продолжить программу с этим номером
bg %<номер>                                  -   продолжить программу с этим номером в фоновом режиме
ps                                           -   посмотреть ваши процессы
top                                          -   отслеживать процессы в реальном времени
top -u<имя пользователя>                     -   отслеживать процессы этого пользователя
kill <номер процесса>                        -   завершить процесс с этим номером
kill -9 <номер процесса>                     -   "убить" процесс с этим номером
free -g                                      -   информация об оперативной памяти
nproc                                        -   количество ядер в процессоре
lscpu                                        -   детальная информация о процессоре
----------------------------------------------
                    Программа Bowtie2
bowtie2-build                                -   запуск построения индеса генома
bowtie2-build <геном> <индекс>
bowtie2-build ref.fasta index
bowtie2                                      -   запуск выравнивателя bowtie
bowtie2 -x <index> -U <риды>
bowtie2 -x index -U reads.fastq
-------------------------------------------------
www.ubuntu.com/downloads                     -   все версии убунту
ctrl+shift+T                                 -   открыть новую вкладку в терминале
Alt + <цифра>                                -   перейти в указанную вкладку
Ctrl + Shift + W                             -   закрыть текущую вкладку
tmux                                         -   запустить tmux
Ctrl + B                                     -   перейти в режим команд
Ctrl + B + C                                 -   создать новую вкладку
Ctrl + B + <цифра>                           -   перейти в указанную вкладку
Ctrl + B + N / Ctrl + B + P                  -   перейти в следующую / предыдущую вкладку
Ctrl + B + X (или exit)                      -   закрыть вкладку
Ctrl + B + D                                 -   временно выйти из tmux
tmux attach / tmux a                         -   вернуться в tmux
tmux list-sessions                           -   посмотреть список запущенных tmux'ов
Ctrl + B + PgUp                              -   перейти в режим просмотра истории
PgUp, PgDown, стрелки                        -   перемещать курсор по истории
Esc, Ctrl + C                                -   выйти из режима просмотра истории
Ctrl + B + ,                                 -   переименовать текущую вкладку
-------------------------------------------------
Редактор VIM
vim                                          -   Вход 
vim файл1                                    -   
vim файл1 файл2 файл3                        -   
Главные команды
:q                                           -   выход
:help                                        -   справка
vimtutor                                     -   очень хороший автотуториал
Режим работы(VIM):
    normal                                   -   Режим по умолчанию 
                                                 Любая клавиша воспринимается как команда
                                                 Сложные команды начинаются с ':'
    insert                                   -   Режим ввода текста - всё что вы нажимаете, вставляется (заменяется)
                                                 Выход через <Esc>, <Ctrl+c>    
    visual                                   -   режим выделения
Перемещение(VIM):
    h,j,k,l                                  -   Стрелочки
    w,W/e,E/b,B                              -   В начало/в конец следующего слова/в начало предыдущего
Ещё крупнее(VIM):
    0,^,$                                    -   начало строки, первый непробельный символ, конец строки
Совсем крупно(VIM):
    gg                                       -   начало файла
    G                                        -   конец
    :21<Enter>                               -   перейти к строке 21
    <Ctrl+D>, <Ctrl+U>                       -   вниз/вверх на N строчек, где N обычно пол-экрана
Удаление(VIM)
    По символам:
    x                                        -   символ под курсором
    X                                        -   символ до курсора
    Сразу много:                             -   d[<кол-во>] <ход>
    de                                       -   удалить до конца текущего слова
    d$                                       -   удалить до конца строки
    d5w                                      -   удалить пять слов
    Специальная команда:
    dd                                       -   удалить строку(или, например, d10d)
    Создание:
    i                                        -   войти в insertion mode
    a                                        -   сдвинуть курсор вправо и войти в insertion mode
    I=^i
    A=$a
    o                                        -   вставить пустую строку снизу и редактировать её
    O                                        -   то же, но строка сверху
Копирование(Vim):
    y<кол-во><ход>                           -   скопировать
    yy                                       -   скопировать строку
Вставить:
    p                                        -   вставить перед
    P                                        -   вставить после
Bash-скриптинг:
   Смотри файлы:
   script1.sh
   script2.sh
   script3.sh
   script4.sh
   script5.sh
   script6.sh
   script7.sh
   script8.sh

Bash-скриптинг: ветвления
   Синтаксис:
       if[[условие]]
       then
          # действия, если условие истинно
       fi                                    -  значит что конструкция закончена
   
   Условия(строки):
       -z <строка>                           -  можно проверить является ли строка пустой
       -n <строка>                           -  можно проверить является ли строка не пустой
       <строка1> == <строка2>                -  можно проверить строки равны   
       <строка1> != <строка2>                -  можно проверить строки не равны
   Примеры:
       if [[ -z $1 ]]
       then
          echo "Первый аргумент пустой!"
       fi

       if [[ $var1 == $var2 ]]
       then
          echo "Переменные равны!"
       fi

    Условия [числа (строки)]:
    <число/строка> операция <число/строка>
       -eq, (==)                             -  равно
       -ne, (!=)                             -  не равно
       -lt, (<)                              -  меньше
       -le,                                  -  меньше или равно
       -gt, (>)                              -  больше
       -ge,                                  -  больше или равно

    Условия(файлы):
       -e <путь>                             -  путь существует
       -f <путь>                             -  это файл
       -d <путь>                             -  это директория
       -s <путь>                             -  размер файла больше 0
       -x <путь>                             -  файл исполняемый
    
    Условия(логические)                      
       !                                     -  отрицание логического выражения
       &&                                    -  логическое "И"
       ||                                    -  логическое "ИЛИ"

Ветвления: альтернативы
  if:
       if [[ условия ]]
       then
          # действия, если условие истинно
       else
          # действия, если условие ложно
       fi

       if[[ условие1 ]]
       then
          # действия, если условие1 истинно
       elif [[ условие2 ]]
       then
          # действия, если условие1 ложно,
          # но условие2 истинно
       else
          # действия, есил оба условия ложны
       fi

  case:
      case переменная in
      знач1)
          # действия, если переменная==знач1
          ;;
      знач2)
          # действия, если переменная==знач2
          ;;
      *)
          # действия, если переменная не равна не одному из вариантов
      esac

Циклы:
  for переменная in список_значений
    do
       # действия, каждый раз переменная
       # принимает следующее значение
       # из списка
    done

      break                          -     прервать выполнение
      continue                       -     перейти на след.значение
  while [[условие]]
  do
       # действия, пока условие истинно
  done
      read переменная                -     записать введенное пользователем значение в переменную

Арифметика:
   let "переменная = выражение"
   Пример:
   let "c = 1 + 1"
   let "c = a + b"
   Операции:
   +,-,/,*                           -     стандартные
   %                                 -     остаток от деления
   **                                -     возведение в степень  
   let "a=a+b"                       -     эквивалентно let "a+=b"

Внешние программы:
     переменная='программа'
     a='echo "test"'
     files='ls ~'
  Код возврата:
     $?
  Выйти с кодом
     exit код

  Пример:
     touch file.txt
     echo $?          -  таком образом узнаём создался файл или нет,
                         код возврата должен быть 0, а если файл не
                         создался то не 0
Проверка кода возврата через if:
   if 'программа'
      # действия, если код 0
   then
   else
      # действия, если код не 0
   fi

Функции:
   имя_функции()
   {
     # действия с $1, $2, ... , $#
   } 

Используем функцию:
...
имя_функции аргумент1 аргумент2 ...
...

Переменные:
имя_функции ()
{
   var_global=1
   local var_local=1
}

Используем:
имя_функции
echo $var_global # выведет 1
echo $var_global # ничего не выведет

Компактная запись:
имя_функции () { действие1; действие2; }

Актуально и в других конструкциях:
if [[ $var== "test " ]]; then
...
for i in 1 2 3 4 5; do
...

---------------------------------------------------------------------------
Графики:
gnuplot - программа для построения графиков
Режим работы:
  - интерактивный
  - потоковый
 Пример:
 plot '<файл>' using 1:2                       -  построить график по файлу; первая колонка -- координата х, вторая --у
 plot '<файл>' using 1:2,'<файл>' using 1:3    -  построить два графика по файлу; первая колонка -- координата х, вторая и третья --у
 --------------------------------------------------------------------------
set title '<название>'                         -  добавить название графику
set xtitle '<название>'                        -  добавить название оси х
set ytitle '<название>'                        -  добавить название оси у
plot '<файл>' using 1:2 title '<название>'     -  добавить название ряду данных
set key autotitle columnhead                   -  брать название ряда данных из первой строчки файла
set xtics <число>                              -  установить количество отсечек на оси х
set ytics <число>                              -  установить количество отсечек на оси y
set xrange [от:до]                             -  установить границы значений на оси x
set xtics('0' 0.0, '1/4' 0.25, '1/2' 0.5, '1' 1.0,) - задать конкретные надписи на отсечке
set logscale y                                 -  логарифмическая шкала для оси OY
set autoscale xy / unset autoscale z           -  автомасштабирование осей
plot '<файл>' using 1:2 smooth csplines with lines It -1    -  построить сглаженную (smooth) методом csplines линию типа (lt) -1 (чёрный цвет)
plot '<файл>' using 1:2 with points pointsize 1 pointtype 10 lt 1
---------------------------------
Потоковый режим работы:
 Создаём скрипт:
 #! /usr/bin/gnuplot-persist
 set terminal png enhanced
 set output "plot.png"
 set ...
 plot ...

Потоковый режим:
Запускаем:
gnuplot --persist <имя_скрипта>
chmod +x <имя_скрипта>
./<имя_скрипта>
--------------------------------

